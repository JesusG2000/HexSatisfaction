// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.2
// source: server.proto

package api

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsUserExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IsUserExistRequest) Reset() {
	*x = IsUserExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserExistRequest) ProtoMessage() {}

func (x *IsUserExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserExistRequest.ProtoReflect.Descriptor instead.
func (*IsUserExistRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *IsUserExistRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IsUserExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *IsUserExistResponse) Reset() {
	*x = IsUserExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserExistResponse) ProtoMessage() {}

func (x *IsUserExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserExistResponse.ProtoReflect.Descriptor instead.
func (*IsUserExistResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *IsUserExistResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type IsAuthorExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IsAuthorExistRequest) Reset() {
	*x = IsAuthorExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorExistRequest) ProtoMessage() {}

func (x *IsAuthorExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorExistRequest.ProtoReflect.Descriptor instead.
func (*IsAuthorExistRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *IsAuthorExistRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IsAuthorExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *IsAuthorExistResponse) Reset() {
	*x = IsAuthorExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorExistResponse) ProtoMessage() {}

func (x *IsAuthorExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorExistResponse.ProtoReflect.Descriptor instead.
func (*IsAuthorExistResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *IsAuthorExistResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x22, 0x24, 0x0a, 0x12, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x49, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2d, 0x0a, 0x15, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x32, 0x8f,
	0x01, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_server_proto_goTypes = []interface{}{
	(*IsUserExistRequest)(nil),    // 0: grpc.IsUserExistRequest
	(*IsUserExistResponse)(nil),   // 1: grpc.IsUserExistResponse
	(*IsAuthorExistRequest)(nil),  // 2: grpc.IsAuthorExistRequest
	(*IsAuthorExistResponse)(nil), // 3: grpc.IsAuthorExistResponse
}
var file_server_proto_depIdxs = []int32{
	0, // 0: grpc.Existance.User:input_type -> grpc.IsUserExistRequest
	2, // 1: grpc.Existance.Author:input_type -> grpc.IsAuthorExistRequest
	1, // 2: grpc.Existance.User:output_type -> grpc.IsUserExistResponse
	3, // 3: grpc.Existance.Author:output_type -> grpc.IsAuthorExistResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsUserExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsUserExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExistanceClient is the client API for Existance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExistanceClient interface {
	User(ctx context.Context, in *IsUserExistRequest, opts ...grpc.CallOption) (*IsUserExistResponse, error)
	Author(ctx context.Context, in *IsAuthorExistRequest, opts ...grpc.CallOption) (*IsAuthorExistResponse, error)
}

type existanceClient struct {
	cc grpc.ClientConnInterface
}

func NewExistanceClient(cc grpc.ClientConnInterface) ExistanceClient {
	return &existanceClient{cc}
}

func (c *existanceClient) User(ctx context.Context, in *IsUserExistRequest, opts ...grpc.CallOption) (*IsUserExistResponse, error) {
	out := new(IsUserExistResponse)
	err := c.cc.Invoke(ctx, "/grpc.Existance/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *existanceClient) Author(ctx context.Context, in *IsAuthorExistRequest, opts ...grpc.CallOption) (*IsAuthorExistResponse, error) {
	out := new(IsAuthorExistResponse)
	err := c.cc.Invoke(ctx, "/grpc.Existance/Author", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExistanceServer is the server API for Existance service.
type ExistanceServer interface {
	User(context.Context, *IsUserExistRequest) (*IsUserExistResponse, error)
	Author(context.Context, *IsAuthorExistRequest) (*IsAuthorExistResponse, error)
}

// UnimplementedExistanceServer can be embedded to have forward compatible implementations.
type UnimplementedExistanceServer struct {
}

func (*UnimplementedExistanceServer) User(context.Context, *IsUserExistRequest) (*IsUserExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (*UnimplementedExistanceServer) Author(context.Context, *IsAuthorExistRequest) (*IsAuthorExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Author not implemented")
}

func RegisterExistanceServer(s *grpc.Server, srv ExistanceServer) {
	s.RegisterService(&_Existance_serviceDesc, srv)
}

func _Existance_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExistanceServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Existance/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExistanceServer).User(ctx, req.(*IsUserExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Existance_Author_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExistanceServer).Author(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Existance/Author",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExistanceServer).Author(ctx, req.(*IsAuthorExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Existance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Existance",
	HandlerType: (*ExistanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "User",
			Handler:    _Existance_User_Handler,
		},
		{
			MethodName: "Author",
			Handler:    _Existance_Author_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
