// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	model "github.com/JesusG2000/hexsatisfaction/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

// Create provides a mock function with given fields: file
func (_m *File) Create(file model.File) (int, error) {
	ret := _m.Called(file)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.File) int); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *File) Delete(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByAuthorID provides a mock function with given fields: id
func (_m *File) DeleteByAuthorID(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindActual provides a mock function with given fields:
func (_m *File) FindActual() ([]model.File, error) {
	ret := _m.Called()

	var r0 []model.File
	if rf, ok := ret.Get(0).(func() []model.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAddedByPeriod provides a mock function with given fields: start, end
func (_m *File) FindAddedByPeriod(start time.Time, end time.Time) ([]model.File, error) {
	ret := _m.Called(start, end)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []model.File); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *File) FindAll() ([]model.File, error) {
	ret := _m.Called()

	var r0 []model.File
	if rf, ok := ret.Get(0).(func() []model.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByAuthorID provides a mock function with given fields: id
func (_m *File) FindByAuthorID(id int) ([]model.File, error) {
	ret := _m.Called(id)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(int) []model.File); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *File) FindByID(id int) (*model.File, error) {
	ret := _m.Called(id)

	var r0 *model.File
	if rf, ok := ret.Get(0).(func(int) *model.File); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *File) FindByName(name string) ([]model.File, error) {
	ret := _m.Called(name)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(string) []model.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotActual provides a mock function with given fields:
func (_m *File) FindNotActual() ([]model.File, error) {
	ret := _m.Called()

	var r0 []model.File
	if rf, ok := ret.Get(0).(func() []model.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUpdatedByPeriod provides a mock function with given fields: start, end
func (_m *File) FindUpdatedByPeriod(start time.Time, end time.Time) ([]model.File, error) {
	ret := _m.Called(start, end)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []model.File); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, file
func (_m *File) Update(id int, file model.File) (int, error) {
	ret := _m.Called(id, file)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, model.File) int); ok {
		r0 = rf(id, file)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, model.File) error); ok {
		r1 = rf(id, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
