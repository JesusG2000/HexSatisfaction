// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	model "github.com/JesusG2000/hexsatisfaction/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Comment is an autogenerated mock type for the Comment type
type Comment struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *Comment) Create(request model.CreateCommentRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.CreateCommentRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: request
func (_m *Comment) Delete(request model.DeleteCommentRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.DeleteCommentRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DeleteCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Comment) FindAll() ([]model.Comment, error) {
	ret := _m.Called()

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func() []model.Comment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: request
func (_m *Comment) FindAllByUserID(request model.UserIDCommentRequest) ([]model.Comment, error) {
	ret := _m.Called(request)

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func(model.UserIDCommentRequest) []model.Comment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIDCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: request
func (_m *Comment) FindByID(request model.IDCommentRequest) (*model.Comment, error) {
	ret := _m.Called(request)

	var r0 *model.Comment
	if rf, ok := ret.Get(0).(func(model.IDCommentRequest) *model.Comment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.IDCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPeriod provides a mock function with given fields: request
func (_m *Comment) FindByPeriod(request model.PeriodCommentRequest) ([]model.Comment, error) {
	ret := _m.Called(request)

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func(model.PeriodCommentRequest) []model.Comment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.PeriodCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPurchaseID provides a mock function with given fields: request
func (_m *Comment) FindByPurchaseID(request model.PurchaseIDCommentRequest) ([]model.Comment, error) {
	ret := _m.Called(request)

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func(model.PurchaseIDCommentRequest) []model.Comment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.PurchaseIDCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByText provides a mock function with given fields: request
func (_m *Comment) FindByText(request model.TextCommentRequest) ([]model.Comment, error) {
	ret := _m.Called(request)

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func(model.TextCommentRequest) []model.Comment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.TextCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDAndPurchaseID provides a mock function with given fields: request
func (_m *Comment) FindByUserIDAndPurchaseID(request model.UserPurchaseIDCommentRequest) ([]model.Comment, error) {
	ret := _m.Called(request)

	var r0 []model.Comment
	if rf, ok := ret.Get(0).(func(model.UserPurchaseIDCommentRequest) []model.Comment); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserPurchaseIDCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: request
func (_m *Comment) Update(request model.UpdateCommentRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.UpdateCommentRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UpdateCommentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
