// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	model "github.com/JesusG2000/hexsatisfaction/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Purchase is an autogenerated mock type for the Purchase type
type Purchase struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *Purchase) Create(request model.CreatePurchaseRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.CreatePurchaseRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreatePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: request
func (_m *Purchase) Delete(request model.DeletePurchaseRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.DeletePurchaseRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DeletePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAfterDate provides a mock function with given fields: request
func (_m *Purchase) FindAfterDate(request model.AfterDatePurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.AfterDatePurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.AfterDatePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Purchase) FindAll() ([]model.Purchase, error) {
	ret := _m.Called()

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func() []model.Purchase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserId provides a mock function with given fields: request
func (_m *Purchase) FindAllByUserId(request model.UserIdPurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.UserIdPurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdPurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBeforeDate provides a mock function with given fields: request
func (_m *Purchase) FindBeforeDate(request model.BeforeDatePurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.BeforeDatePurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.BeforeDatePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFileName provides a mock function with given fields: request
func (_m *Purchase) FindByFileName(request model.FileNamePurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.FileNamePurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.FileNamePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: request
func (_m *Purchase) FindById(request model.IdPurchaseRequest) (*model.Purchase, error) {
	ret := _m.Called(request)

	var r0 *model.Purchase
	if rf, ok := ret.Get(0).(func(model.IdPurchaseRequest) *model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.IdPurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPeriod provides a mock function with given fields: request
func (_m *Purchase) FindByPeriod(request model.PeriodPurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.PeriodPurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.PeriodPurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIdAfterDate provides a mock function with given fields: request
func (_m *Purchase) FindByUserIdAfterDate(request model.UserIdAfterDatePurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.UserIdAfterDatePurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdAfterDatePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIdAndFileName provides a mock function with given fields: request
func (_m *Purchase) FindByUserIdAndFileName(request model.UserIdFileNamePurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.UserIdFileNamePurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdFileNamePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIdAndPeriod provides a mock function with given fields: request
func (_m *Purchase) FindByUserIdAndPeriod(request model.UserIdPeriodPurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.UserIdPeriodPurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdPeriodPurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIdBeforeDate provides a mock function with given fields: request
func (_m *Purchase) FindByUserIdBeforeDate(request model.UserIdBeforeDatePurchaseRequest) ([]model.Purchase, error) {
	ret := _m.Called(request)

	var r0 []model.Purchase
	if rf, ok := ret.Get(0).(func(model.UserIdBeforeDatePurchaseRequest) []model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdBeforeDatePurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLast provides a mock function with given fields:
func (_m *Purchase) FindLast() (*model.Purchase, error) {
	ret := _m.Called()

	var r0 *model.Purchase
	if rf, ok := ret.Get(0).(func() *model.Purchase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastByUserId provides a mock function with given fields: request
func (_m *Purchase) FindLastByUserId(request model.UserIdPurchaseRequest) (*model.Purchase, error) {
	ret := _m.Called(request)

	var r0 *model.Purchase
	if rf, ok := ret.Get(0).(func(model.UserIdPurchaseRequest) *model.Purchase); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Purchase)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserIdPurchaseRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
