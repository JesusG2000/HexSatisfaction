// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	model "github.com/JesusG2000/hexsatisfaction/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *File) Create(request model.CreateFileRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.CreateFileRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: request
func (_m *File) Delete(request model.DeleteFileRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.DeleteFileRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.DeleteFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindActual provides a mock function with given fields:
func (_m *File) FindActual() ([]model.File, error) {
	ret := _m.Called()

	var r0 []model.File
	if rf, ok := ret.Get(0).(func() []model.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAddedByPeriod provides a mock function with given fields: request
func (_m *File) FindAddedByPeriod(request model.AddedPeriodFileRequest) ([]model.File, error) {
	ret := _m.Called(request)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(model.AddedPeriodFileRequest) []model.File); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.AddedPeriodFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *File) FindAll() ([]model.File, error) {
	ret := _m.Called()

	var r0 []model.File
	if rf, ok := ret.Get(0).(func() []model.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByAuthorID provides a mock function with given fields: request
func (_m *File) FindByAuthorID(request model.AuthorIDFileRequest) ([]model.File, error) {
	ret := _m.Called(request)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(model.AuthorIDFileRequest) []model.File); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.AuthorIDFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: request
func (_m *File) FindByID(request model.IDFileRequest) (*model.File, error) {
	ret := _m.Called(request)

	var r0 *model.File
	if rf, ok := ret.Get(0).(func(model.IDFileRequest) *model.File); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.IDFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: request
func (_m *File) FindByName(request model.NameFileRequest) ([]model.File, error) {
	ret := _m.Called(request)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(model.NameFileRequest) []model.File); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.NameFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNotActual provides a mock function with given fields:
func (_m *File) FindNotActual() ([]model.File, error) {
	ret := _m.Called()

	var r0 []model.File
	if rf, ok := ret.Get(0).(func() []model.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUpdatedByPeriod provides a mock function with given fields: request
func (_m *File) FindUpdatedByPeriod(request model.UpdatedPeriodFileRequest) ([]model.File, error) {
	ret := _m.Called(request)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(model.UpdatedPeriodFileRequest) []model.File); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UpdatedPeriodFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: request
func (_m *File) Update(request model.UpdateFileRequest) (int, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.UpdateFileRequest) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UpdateFileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
